Imperative paradigm vs Declarative paradigm

1. Императивный стиль (сценарный синтаксис) vs Декларативный стиль (декларативный синтаксис)

Императивный стиль:
    - Процедурное программирование
    - Структурное программирование vs Объектно-ориентированное программирование

Декларативный стиль:
    - Функциональное программирование vs Логическое программирование






Императивный стиль:
    * Императивное программирование — это общий подход, который охватывает как структурное, так и процедурное.
    Программирование, основанное на последовательных инструкциях, описывающих, как достичь результата (пошаговый процесс).
    
    * Структурное программирование - это подмножество императивного программирования, акцентирующее внимание на использовании структур управления (циклы, ветвления, функции).
    
    * Процедурное программирование — это конкретный стиль структурного программирования, который организует код в виде функций или процедур для решения задач. 
    Разновидность структурного программирования, в котором код организован в виде вызовов процедур или функций.
        - Разделение программы на процедуры (функции).
        - Повторное использование кода.
        - Параметры функций и локальные переменные.

    * Объектно-ориентированное программирование - это парадигма, основанная на представлении программы как набора объектов, которые взаимодействуют друг с другом, обмениваясь сообщениями и вызывая методы.
        - Наследование: повторное использование кода через расширение классов.
        - Полиморфизм: единый интерфейс для разных объектов.
        - Инкапсуляция: скрытие реализации внутри объекта.
        - Абстракция: выделение ключевых характеристик объекта.


Декларативный синтаксис:
    - HTML
    - CSS
    - XML
    - XAML
    - JSON
    - YAML (Jenkinsfile, Docker, Ansible, файл конфигурации фреймворка)
    - SQL
    - Переменная среды (окружения)
    Декларативный синтаксис = Веб-форма
    Декларативный синтаксис = параметр и аргумент
    Декларативный синтаксис = свойство и значение
    *Примечание: свойство - это параметр, а значение - это аргумент.


2. Историческое развитие языков программирования:
    - Процедурное программирование (Например, скрипт на Python, когда все методы в одном классе и одном файле .py).
    - Структурное программирование (Например, линейная структура = линейный алгоритм, ветвляющийся алгоритм, многоальтернативное ветвление (if-elif-else)).
    - Объектно-ориентированное программирование (Наследование, Полиморфизм, Инкапсуляция, Абстракция).
    - Функциональное программирование.



There are 4 major principles that make an language Object Oriented. These are Encapsulation, Data Abstraction, Polymorphism and Inheritance. These are also called as four pillars of Object Oriented Programming.



Пример интеграции всех парадигм в С#:
public class Calculator // ООП: класс
{
    public int Add(int a, int b) // Процедурный стиль
    {
        return a + b;
    }

    public void PrintEvenNumbers(int limit) // Структурный стиль
    {
        for (int i = 0; i <= limit; i++) // Императивный стиль
        {
            if (i % 2 == 0)
            {
                Console.WriteLine(i);
            }
        }
    }
}

class Program
{
    static void Main()
    {
        Calculator calc = new Calculator(); // ООП
        int result = calc.Add(5, 10); // Процедурный вызов
        Console.WriteLine($"Sum: {result}");
        calc.PrintEvenNumbers(10); // Структурный вызов
    }
}







Виды логик в программировании:
    - параметр и аргумент.
    - процедура (Sub procedure), не имеет возвращаемого значения, а изменяет состояние (status) объекта.
    - функция (Function), имеет возвращаемое значение, не изменяет состояние объекта.

    - метод void - это процедура.
    - метод без void - это функция.

    Процедуры, функции и методы имеют параметры, куда передаются аргументы.
    Переменная среды - это параметр и аргумент.
    Переменной присваивается значение - это тоже параметр и аргумент своего рода. Слева от знака "=" будет параметр, а справа будет аргумент. 

    Форма и содержание = Placeholder and Content.
    Форма и содержание = Контейнер и содержимое.
    Form and Content = Переменная (variable) и значение (value).
    Форма и содержание = Параметр и аргумент.
    Parameter and argument = PlaceHolder and actual value
    Поле и запись = Контейнер и содержимое.
    Field and record = Variable and value 

    Таблица - это контейнер для контейнеров (полей (fields)).

    В таблице Excel "field name" - это заголовок столбца, record (запись) - это одна строка полностью.
    Поля (fields) и запись = Параметр и аргумент.

    Поле (field) -это столбец (column).
    Запись (record) - это строка (row).
    Ячейка (cell) - это Data Item (Value).

    Field is container for records's cells (vertical orientation).
    Record is container for fields's cells (horizontal orientation).

    Field is container for many objects.
    Record is container for one object with his many properties.

    ВПР - это PRIMARY KEY и FOREIGN KEY. 
