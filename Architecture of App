Hierarchy:

1. Architecture of App. (Микросервисная, монолитная и тд архитектуры. Разделение на физические уровни).
2. Structure of App. (Структура определяет какие компоненты используются в каждом конкретном приложении).
3. Layers of App. (Логическое разделение на слои, Clean Architecture).
4. Components of App. (Компоненты могут находиться в разных слоях. Компонент это Controller, Entity, EF, Adapter и тд. Компонент может состоять из нескольких классов).
5. Structure of Project. (Папки (folders) и файлы. Это к разработке не имеет отношения, это просто удобство для программиста.
                          Хотя есть требования к наличию обязательных файлов и папок в asp.net core, типа Program.cs, папки Resources и тд).
Внутри папок находятся файлы.
Внутри файла находится Class.
Внутри Class находятся методы.

Важно обеспечить "mapping" между 4 и 5 пунктами иерархии, т.е. обеспечить отображение компонентов на папки и файлы.


Слои без SOLID не нужны.
Clean Architecture - это набор правил (типа Конституции) по которой выделяют слои. 




MVVM, MVC - это презентационные паттерны, а не архитектурные паттерны.

В MVC в букву M очень много всего кладут.

Функция ViewModel - это отправка и получение команд (CQS).
Функция Controller - это обработка запросов (CQS).

MVVM использует паттерн "Команда".
MVC использует паттерн "Mediator" (Посредник).

MVC не использует анемичные классы.

Прослойка между Controller и View использует библиотеку MediatR.
Библиотеку MediatR написали чтобы каждый раз заново не реализовывать паттерн "Посредник".
Библиотека MediatR реалиует CQRS подход. Эта библиотека используется чаще всего там, где чтения больше чем записи.



WPF (MVVM) app
Presentation Layer
  * View (.xaml, .xaml.cs)
  * ViewModel (.cs)


Model Layer
  * Model
      Application Service Layer
        - Use Cases
        - Interactor
        - application services


                                                    Domain Layer
                                                    - domain services
                                                    - Entities


      Infrastructure Layer
        Data Layer
          - Repository (Data-Mapper)
          - Adapters, Gateways
          - Database, External Interfaces (шина сообщений)

MVC
  - View (PRESENTATION LAYER)
  - Controller (Взаимодействие) (APPLICATION SERVICES LAYER). Часто Controller является частью Presentation layer, но Application services layer остается на месте.
  - Model (Entity + Business Logic + DTO) (DOMAIN LAYER)
          DATA LAYER находится за пределами MVC, и общается через Application services layer с Domain layer
